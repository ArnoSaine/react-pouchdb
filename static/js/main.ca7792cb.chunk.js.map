{"version":3,"sources":["Container/Aside.js","Container/index.js","Footer/ClearCompleted.js","Footer/Counter.js","Footer/Filter.js","Footer/index.js","Input.js","List/Item.js","List/Docs.js","List/index.js","ToggleAll.js","App.js","serviceWorker.js","index.js","Container/styles.module.css"],"names":["Aside","react_default","a","createElement","className","href","url","text","map","_ref","key","Container","children","concat","styles","Counter","bulkDocs","useDB","docs","useFind","selector","completed","length","onClick","doc","Object","objectSpread","_deleted","type","$ne","Filter","path","title","NavLink","activeClassName","exact","replace","to","Footer","Counter_Counter","Input","post","autoFocus","onKeyDown","keyCode","target","value","trim","timestamp","Date","now","placeholder","Item","_ref$doc$completed","_useDB","put","remove","_useState","useState","_useState2","slicedToArray","focus","setFocus","_useState3","_useState4","isEditing","setIsEditing","_useState5","_useState6","setTitle","inputRef","useRef","useEffect","current","classNames","onDoubleClick","checked","onChange","ref","_ref2","onBlur","filterByCompletedField","active","Docs","filter","match","params","$gte","sort","_id","List","Route","component","ToggleAll","every","Fragment","id","htmlFor","basename","homepage","App","react","fallback","es","name","BrowserRouter","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","learn-bar"],"mappings":"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","file":"static/js/main.ca7792cb.chunk.js","sourcesContent":["export default () => (\n  <aside className=\"learn\">\n    <header>\n      <h3>react-pouchdb</h3>\n      <h5>Example</h5>\n      <a href=\"https://github.com/ArnoSaine/react-pouchdb/tree/master/todoapp\">\n        Source\n      </a>\n    </header>\n    <hr />\n    <h4>Official Resources</h4>\n    <ul>\n      {[\n        {\n          url: 'https://github.com/ArnoSaine/react-pouchdb',\n          text: 'react-pouchdb'\n        },\n        {\n          url: 'https://pouchdb.com',\n          text: 'PouchDB'\n        },\n        {\n          url: 'http://couchdb.apache.org',\n          text: 'CouchDB'\n        }\n      ].map(({ text, url }) => (\n        <li key={url}>\n          <a href={url}>{text}</a>\n        </li>\n      ))}\n    </ul>\n  </aside>\n);\n","import Aside from './Aside';\nimport styles from './styles.module.css';\n\nexport default ({ children }) => (\n  <div className={`learn-bar ${styles['learn-bar']}`}>\n    <Aside />\n    {children}\n  </div>\n);\n","import { useDB, useFind } from 'react-pouchdb/browser';\n\nexport default function Counter() {\n  const { bulkDocs } = useDB();\n  const docs = useFind({\n    selector: {\n      completed: true\n    }\n  });\n  const { length } = docs;\n  return length ? (\n    <button\n      className=\"clear-completed\"\n      onClick={() => bulkDocs(docs.map(doc => ({ ...doc, _deleted: true })))}\n      type=\"button\"\n    >\n      Clear completed ({length})\n    </button>\n  ) : null;\n}\n","import { useFind } from 'react-pouchdb/browser';\n\nexport default function Counter() {\n  const docs = useFind({\n    selector: {\n      completed: { $ne: true }\n    }\n  });\n  const { length } = docs;\n  return (\n    <span className=\"todo-count\">\n      {length} {length === 1 ? 'item' : 'items'} left\n    </span>\n  );\n}\n","import { NavLink } from 'react-router-dom';\n\nexport default () => (\n  <ul className=\"filters\">\n    {[\n      { path: '', title: 'All' },\n      { path: 'active', title: 'Active' },\n      { path: 'completed', title: 'Completed' }\n    ].map(({ path, title }) => (\n      <li key={path}>\n        <NavLink activeClassName=\"selected\" exact replace to={`/${path}`}>\n          {title}\n        </NavLink>\n      </li>\n    ))}\n  </ul>\n);\n","import ClearCompleted from './ClearCompleted';\nimport Counter from './Counter';\nimport Filter from './Filter';\n\nexport default () => (\n  <footer className=\"footer\">\n    <Counter />\n    <Filter />\n    <ClearCompleted />\n  </footer>\n);\n","import { useDB } from 'react-pouchdb/browser';\n\nexport default function Input() {\n  const { post } = useDB();\n  return (\n    <input\n      autoFocus\n      className=\"new-todo\"\n      onKeyDown={({ keyCode, target }) => {\n        const title = target.value.trim();\n        if (keyCode === 13 && title) {\n          post({ title, timestamp: Date.now() });\n          target.value = '';\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n      type=\"text\"\n    />\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDB } from 'react-pouchdb/browser';\n\nexport default function Item({ doc, doc: { completed = false } }) {\n  const { put, remove } = useDB();\n  const [focus, setFocus] = useState();\n  const [isEditing, setIsEditing] = useState();\n  const [title, setTitle] = useState(doc.title);\n  const inputRef = useRef();\n  useEffect(() => {\n    if (focus) {\n      inputRef.current.focus();\n      setFocus(false);\n    }\n  });\n\n  return (\n    <li\n      className={classNames(completed && 'completed', isEditing && 'editing')}\n      onDoubleClick={() => {\n        setFocus(true);\n        setIsEditing(true);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          checked={completed}\n          onChange={() =>\n            put({\n              ...doc,\n              completed: !completed\n            })\n          }\n          type=\"checkbox\"\n        />\n        <label>{title}</label>\n        <button className=\"destroy\" onClick={() => remove(doc)} type=\"button\" />\n      </div>\n      <input\n        className=\"edit\"\n        ref={inputRef}\n        type=\"text\"\n        value={title}\n        onChange={({ target: { value } }) => setTitle(value)}\n        onBlur={() => {\n          setIsEditing(false);\n          put({\n            ...doc,\n            title\n          });\n        }}\n      />\n    </li>\n  );\n}\n","import { useFind } from 'react-pouchdb/browser';\nimport Item from './Item';\n\nconst filterByCompletedField = {\n  active: { $ne: true },\n  completed: true\n};\n\nexport default function Docs({\n  match: {\n    params: { filter }\n  }\n}) {\n  const docs = useFind({\n    selector: {\n      timestamp: { $gte: null },\n      completed: filterByCompletedField[filter]\n    },\n    sort: ['timestamp']\n  });\n  return (\n    <ul className=\"todo-list\">\n      {docs.map(doc => (\n        <Item key={doc._id} doc={doc} />\n      ))}\n    </ul>\n  );\n}\n","import { Route } from 'react-router-dom';\nimport Docs from './Docs';\n\nexport default () => <Route path=\"/:filter?\" component={Docs} />;\n","import { useDB, useFind } from 'react-pouchdb/browser';\n\nexport default function ToggleAll() {\n  const docs = useFind({\n    selector: {\n      timestamp: { $gte: null }\n    }\n  });\n  const { bulkDocs } = useDB();\n  return docs.length\n    ? (() => {\n        const completed = docs.every(({ completed }) => completed);\n        return (\n          <>\n            <input\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={completed}\n              onChange={() =>\n                bulkDocs(docs.map(doc => ({ ...doc, completed: !completed })))\n              }\n              type=\"checkbox\"\n            />\n            <label htmlFor=\"toggle-all\" />\n          </>\n        );\n      })()\n    : null;\n}\n","import { Suspense } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PouchDB } from 'react-pouchdb/browser';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Input from './Input';\nimport List from './List';\nimport ToggleAll from './ToggleAll';\nimport { homepage } from '../package.json';\n\nconst basename = process.env.NODE_ENV === 'development' ? undefined : homepage;\n\nfunction App() {\n  return (\n    <Suspense fallback=\"loading...\">\n      <Container>\n        <PouchDB name=\"todoapp\">\n          <BrowserRouter basename={basename}>\n            <section className=\"todoapp\">\n              <header>\n                <h1>todos</h1>\n              </header>\n              <Input />\n              <section className=\"main\">\n                <ToggleAll />\n                <List />\n                <Footer />\n              </section>\n            </section>\n          </BrowserRouter>\n        </PouchDB>\n      </Container>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'todomvc-app-css/index.css';\nimport 'todomvc-common/base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learn-bar\":\"styles_learn-bar__2qN9S\"};"],"sourceRoot":""}